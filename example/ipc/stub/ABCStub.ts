// tslint:disable
// @ts-nocheck
/** This file is autogenerated. Do not edit */
// @ts-ignore
import { EventEmitter } from 'events';
export declare interface ABCStub {
    once(event: '45.6', listener: () => void): this;
    on(event: '45.6', listener: () => void);
    on(event: '123', listener: () => void);
    emit(event: string, ...data: any[]): boolean;
    on(event: string, listener: (...data: any[]) => void): this;
    once(event: string, listener: (...data: any[]) => void): this;
}

export class ABCStub extends EventEmitter {
    public async pippo(qui: number): Promise<number> {
        return await this._ipc.invoke({ __type__: 'abc-pippo', qui });
    }

    public async paperino(): Promise<number> {
        return await this._ipc.invoke({ __type__: 'abc-paperino', });
    }

    public async pluto(_, __, ___?: any): Promise<number> {
        return await this._ipc.invoke({ __type__: 'abc-pluto', _, __, ___ });
    }

    public async getter(): Promise<number> {
        return await this._ipc.invoke({ __type__: 'abc-getter', });
    }

    public async setter(value: any) {
        return await this._ipc.invoke({ __type__: 'abc-setter', value });
    }

    public async doit(a?: number) {
        return await this._ipc.invoke({ __type__: 'abc-doit', a });
    }

    private _ipc: any;
    private _callbacks: { [__method__: string]: (...data: any[]) => any };

    public constructor(ipc: any) {
        super();
        this._ipc = ipc;
        this._callbacks = {};
    }

    public async invoke(message: any) {
        const listener = this._callbacks[message.data.__method__];
        if (!listener)
            throw new Error(`Listener ${message.data.__method__} not attached`);

        const response: any = { __type__: '__invoke__', __id__: message.data.__id__ };
        try {
            response.__return__ = await listener(...message.data.__data__);
        }
        catch (error) {
            response.__error__ = error.message || error;
        }
        this._ipc.exec.postMessage(response);
    }

    public listen_12345(listener: (...data: any[]) => any) {
        this._callbacks['12345'] = listener;
    }

    public listen_get_42(listener: (...data: any[]) => any) {
        this._callbacks['get.42'] = listener;
    }
}
